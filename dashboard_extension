import tkinter as tk
from tkinterpages import customwidgets
from tkinter.ttk import Notebook
from databases.sql_browser import sql_browser
from tkinterpages.forms.admission_form import admissionform
from tkinterpages.photomanagement import photomanage

class SelectedView_from_search(tk.Toplevel):
	def __init__(self,master,unikid,*args,**kwargs):
		tk.Toplevel.__init__(self,master,*args, **kwargs)
		self._P=master
		self.geometry('+30+0')
		self.resizable(0,0)
		self.unikid=unikid
		self.background=tk.PhotoImage(file='media/ui/student_found.uis')
		self.background1=tk.PhotoImage(file='media/ui/sub_student_found.uis')
		self.background2=tk.PhotoImage(file='media/ui/hh.png')
		self.bg=tk.Label(self,image=self.background)
		self.bg.pack()

		self.profiler=tk.Label(self,image=self.background2,bd=1,bg='#555')
		self.profiler.place(x=5,y=50)

		self.res=tk.Label(self,image=self.background1,bd=1,bg='#555')
		self.res.place(x=297,y=14)






class Search_button_popup(tk.Toplevel):
	def __init__(self,parent,printDict, *args, **kwargs):
		tk.Toplevel.__init__(self,parent,*args, **kwargs)
		self.geometry('600x650+350+0')
		self.resizable(0,0)
		self._P=parent
		self['bg']='pink'
		#icons 
		self.check = tk.PhotoImage(file=r'media/icons/du_swipe_check_sel.png')
		self.check1 = tk.PhotoImage(file=r'media/icons/du_swipe_dragger_monkey.png')
		self.returnValue = None
		self.myframe=tk.Frame(self)
		self.myframe.pack(anchor='nw')
		self.canvas=tk.Canvas(self.myframe)
		self.canvas.pack(side="left")
		self.containerFrame=tk.Frame(self.canvas)
		myscrollbar=tk.Scrollbar(self.myframe,orient="vertical",command=self.canvas.yview)
		myscrollbar.pack(side="right",fill="y")
		self.canvas.configure(yscrollcommand=myscrollbar.set)
		self.canvas.create_window((0,0),window=self.containerFrame,anchor='nw')
		self.containerFrame.bind("<Configure>",self.scroll)
		self.addit()
		self.wait_window()
	def scroll(self,event):
		self.canvas.configure(scrollregion=self.canvas.bbox("all"),width=580,height=650)
	def addit(self):
		for i in range(50):
			f = tk.Frame(self.containerFrame,bd=1,relief='ridge',bg='#ddd')
			tk.Label(f,image=self.check1).pack(side='left',fill='y')
			b=tk.Button(f,image=self.check,bd=0,command=lambda a=i:self.reid(a),bg='#ddd' )
			b.pack(side='right',fill='y')
			kw={'bd':1,'bg':'#ddd','anchor':'nw','font':('',12)}
			tk.Label(f,text='Name (class)',**kw).pack(anchor='nw')
			tk.Label(f,text='FatherName',**kw).pack(anchor='nw')
			tk.Label(f,text='Address',**kw).pack(anchor='nw')
			tk.Label(f,text='Please select you looking for',fg='red',**kw,width=42).pack(side='bottom',fill='x',anchor='nw')
			f.pack(pady=5)
			self.update_idletasks()
	def reid(self,a):
		self.returnValue=a
		self.destroy()
		self._P.focus_force()




class Findframe(tk.Frame):
	def __init__(self,parent, *args, **kwargs):
		tk.Frame.__init__(self,parent, *args, **kwargs)
		self._P =parent
		self.configure(bd=1)
		#icons    search_buzz_result_logo.png
		b=customwidgets.cbb(self,'Select Class',['1','2'],**kwargs)
		b.pack(side='left')
		b.entry['width']=20

		name=customwidgets.LabeledEntry(self,'Name',**kwargs)
		name.pack(side='left')
		name.entryVar.trace('w',self.FindWhileTyping)

		_id=customwidgets.LabeledEntry(self,'Id',**kwargs)
		_id.pack(side='left')

		self.btn=tk.Button(self,bd=0,text='Search',command=self.find_onclick,**kwargs)
		self.btn.pack(side='right')
	def find_onclick(self):
		v=Search_button_popup(self._P.master,'')
		print(v.returnValue)
	def FindWhileTyping(self,a,b,c):
		b = PopUp(self._P,(self.btn.winfo_rootx()+177,self.btn.winfo_rooty()-88))
		print(b.returnValue)





class ViewUserIntro(tk.Frame):
	def __init__(self,parent,res,*args, **kwargs):
		tk.Frame.__init__(self,parent, *args, **kwargs)

		#fetch user details from databsase
		res=res[1][0]

		kk={"bg":'#888'}

		self.lbl=customwidgets.PopUpMidContaierFrameWithImage(self,'View User',(788,190),'media/icons/du_swipe_dragger_monkey.png',**kk)
		self.lbl.pack(anchor='nw')

		#info table
		c = "Name : {} {} {} \n\nMobile : {} \n\nEmail : {}".format(res[1],res[2],res[3],res[5],res[6])

		
		

		photomanage.PhotoManage.setPhoto( self.lbl.showbtn, photomanage.PhotoManage.BinToImage(res[7]) )
		

		tk.Label(self.lbl.sub_frame,text=c,justify='left').pack()

	def expand(self,e):self.lbl.set_sub_frame()
	
	def shrink(self,e):self.lbl.set_sub_frame()






class HomePage(tk.Frame):
	def __init__(self,parent,database,loginIdPsw,*args, **kwargs):
		tk.Frame.__init__(self,parent, *args, **kwargs)

		self.uid = loginIdPsw

		self.home_pageBAckgroung=tk.PhotoImage(file='media/largeimages/main_bg.png')
		self.hhh=tk.PhotoImage(file='media/largeimages/statics_bg.png')
		self.mypic=tk.PhotoImage(file='media/largeimages/mypic.png')
		self.spl=tk.PhotoImage(file='media/largeimages/school_profiler.png')


		notebook = Notebook(self)
		notebook.pack()

		home=tk.Frame(notebook,bg='#999')
		home.pack()
		notebook.add(home,text='Home')
		#set background
		tk.Label(home,image=self.home_pageBAckgroung).pack(anchor='nw')
		#==============================================

		#()(()()()()()"()()))" get school data

		v = database.fetchdata("SELECT * FROM school_profile")[0]

		s_name,s_adr,s_image,s_board,s_title=v

		


		# #get all data


		schol=tk.Frame(notebook)
		schol.pack()
		tk.Label(schol,image=self.spl).pack()

		school_profiler = tk.Canvas(schol,height=500,width=630,bg='white')
		school_profiler.place(x=150,y=50)
		notebook.add(schol,text='School Profile')



		self.schoolPhoto =tk.PhotoImage(file=photomanage.PhotoManage.BinToImage(s_image))

		school_profiler.create_image(300,150,image=self.schoolPhoto)

		school_profiler.create_text(300,379,fill='blue',font=('Ink Free',16,'bold'),text=s_name)
		school_profiler.create_text(300,409,fill='blue',font=('Ink Free',16,'bold'),text=s_title)
		school_profiler.create_text(300,439,fill='blue',font=('Ink Free',16,'bold'),text=s_adr)
		school_profiler.create_text(300,459,fill='blue',font=('Ink Free',16,'bold'),text=s_board)





		user_intro= ViewUserIntro(home,self.uid)
		user_intro.place(x=800,y=100)

		
		statics=tk.Frame(notebook,bg='#888')
		statics.pack()
		notebook.add(statics,text='Statics')

		tk.Label(statics,text='sdfsdf',image=self.hhh).place(x=0)

		

		about=tk.Frame(notebook,bg='#777')
		about.pack()
		notebook.add(about,text='About')
		tk.Label(about,image=self.mypic).place(x=0)





class SearchResultFrame(tk.Frame):
	def __init__(self,*args, **kwargs):
		tk.Frame.__init__(self,*args, **kwargs)
		self.retVal=self.returnValue = None
	
		#icons 
		self.check = tk.PhotoImage(file=r'media/icons/du_swipe_check_sel.png')
		self['relief']='ridge'

		self.myframe=tk.Frame(self,bg='#666')
		self.myframe.pack()

		self.canvas=tk.Canvas(self.myframe,bg='#666')
		self.canvas.pack(side="left")

		self.containerFrame=tk.Frame(self.canvas,bg='#898')

		myscrollbar=tk.Scrollbar(self.myframe,orient="vertical",command=self.canvas.yview)
		myscrollbar.pack(side="right",fill="y")

		self.canvas.configure(yscrollcommand=myscrollbar.set)
		self.canvas.create_window((0,0),window=self.containerFrame,anchor='nw')

		self.containerFrame.bind("<Configure>",self.scroll)
		self.addit()
	def scroll(self,event):
		self.canvas.configure(scrollregion=self.canvas.bbox("all"),width=970,height=630	)
	def addit(self):
		for i in range(50):
			f = tk.Frame(self.containerFrame,bd=1,relief='ridge',width=970,height=170,bg='#666')


			tk.Label(f,text='image',height=10,width=18,relief='groove',bg='#666').place(x=10,y=5)

			kw={'bd':1,'bg':'#666','fg':'white','anchor':'nw'}
			
			tk.Label(f,text='Name (class)',**kw).place(x=100,y=10)
			
			tk.Label(f,text='FatherName',**kw).place(x=100,y=30)
			
			tk.Label(f,text='Address',**kw).place(x=100,y=50)
			
			# tk.Label(f,text='Please select you looking for',**kw,width=27).pack(side='bottom',fill='x',anchor='nw')
			# b=tk.Button(f,image=self.check,bd=0,command=lambda a=i:self.reid(a),bg='#666' )
			# b.pack(side='right',fill='y')
			
			f.pack(pady=5,fill='x',anchor='nw',expand=True)
			self.update_idletasks()
	def reid(self,a):
		self.returnValue=a
	def changeRetValToId(self,sid):
		self.retVal=sid
		self.destroy()
		viewFindedStudentWindow(self.master,self.retVal)









class StdMngPage(Notebook):
	def __init__(self,parent,database,*args, **kwargs):
		Notebook.__init__(self,parent, *args, **kwargs)

		self.home_pageBAckgroung=tk.PhotoImage(file='media/largeimages/main_bg.png')
		self.hhh=tk.PhotoImage(file='media/largeimages/statics_bg.png')
		self.mypic=tk.PhotoImage(file='media/largeimages/mypic.png')
		self.bg=tk.PhotoImage(file='media/ui/g906.png')

		self.find_unique_id = False
		self._db = database
		# notebook = (self)
		# notebook.pack(fill='both',expand=True)

		home=tk.Frame(self,bg='#666')
		home.pack()
		self.add(home,text='New Admission')

		tk.Label(home,image=self.bg,relief='flat',bg='#666').place(x=100,y=100)

		
		self.identryVar=tk.StringVar()
		self.identry = tk.Entry(home,bg='#555',relief='flat',textvariable=self.identryVar,font=("",17),width=25)
		self.identry.place(x=480,y=250)

		self.identryVar.trace_add('write',self.trace)

		self.idstatus = tk.Label(self,text='Status: - - - - ',bg='#222',fg='white')
		self.idstatus.place(x=485,y=345)

		rand_id_button =tk.Button(home,text='   Generate Random Student Id   ',command=self.myRid,relief='flat',bg='#555',fg='white')
		rand_id_button.place(x=485,y=370)


		self.next_btn =tk.Button(home,text='Next',command=self.on_next,relief='flat',width=18,
			bg='#555',fg='white',state='disabled')
		self.next_btn.place(x=485,y=420)

		#set background
		#==============================================		
		find_studentFrame=tk.Frame(self)
		find_studentFrame.pack()
		self.add(find_studentFrame,text='Find Student')

		#search box
		# searchFrame = tk.Frame(find_studentFrame,bg='#333')
		# searchFrame.pack(side='top',fill='x',anchor='nw')

		# input_match = tk.Entry(searchFrame,font=('',14),relief='flat')
		# input_match.pack(side='left',fill='x',expand=True,pady=3)

		# tk.Button(searchFrame,text='Search',relief='flat').pack(side='right')

		searchFrame = Findframe(find_studentFrame)
		searchFrame.pack(side='top',fill='x',anchor='nw')
		
		result_frame = SearchResultFrame(find_studentFrame)
		result_frame.pack(side='left',anchor='nw',expand=True,fill='both')





		
	
	

		# about=tk.Frame(self,bg='#777')
		# about.pack()
		# self.add(about,text='Report')
		# tk.Label(about,image=self.mypic).place(x=0)
	def on_next(self):
		self.identryVar.set('')
		admission_form = admissionform.AdmissionForm(self.master,self._db,'1232') 

	def trace(self,var,index,mode):
		avl = self.check_if_avail()
		if len(self.identryVar.get()) < 4:
			self.idstatus['text']='Status: too short should be >= 4 digits'
			self.next_btn['state']='disabled'

		elif avl:
			self.next_btn['state']='normal'
			self.idstatus['text']='Status: Available you can proceed forward'

		else:
			self.idstatus['text']='Status: Id is already in use..'
			self.next_btn['state']='disabled'

	def check_if_avail(self):
		qry="""SELECT St_RegistrationId FROM MyStudentBasicDetails WHERE St_RegistrationId=%s"""
		
		v=self._db.fetchdata(qry,(self.identryVar.get(),))

		if v==[]:
			self.find_unique_id=True
			return True
		else:
			self.find_unique_id=False
			return False

	def myRid(self):
		self.find_unique_id=False
		self.random_id_generator()
	

	def random_id_generator(self):
		from random import randint
		while not self.find_unique_id:
			new = randint(1000,9999)
			self.identryVar.set(str(new))


		
		



